
bl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000057a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000594  00000000  00000000  000005d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006cb  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea e7       	ldi	r30, 0x7A	; 122
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	8c d0       	rcall	.+280    	; 0x172 <main>
  5a:	8d c2       	rjmp	.+1306   	; 0x576 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <boot_program>:
#include <avr\interrupt.h>       // Add the necessary ones
#include <avr\signal.h>          // here
#include<util/delay.h>

void boot_program(void)
{
  5e:	df 93       	push	r29
  60:	cf 93       	push	r28
  62:	cd b7       	in	r28, 0x3d	; 61
  64:	de b7       	in	r29, 0x3e	; 62
  66:	2e 97       	sbiw	r28, 0x0e	; 14
  68:	0f b6       	in	r0, 0x3f	; 63
  6a:	f8 94       	cli
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	0f be       	out	0x3f, r0	; 63
  70:	cd bf       	out	0x3d, r28	; 61
		DDRB = 0XFF;
  72:	e7 e3       	ldi	r30, 0x37	; 55
  74:	f0 e0       	ldi	r31, 0x00	; 0
  76:	8f ef       	ldi	r24, 0xFF	; 255
  78:	80 83       	st	Z, r24
		
	   PORTB ^= 0XFF;
  7a:	a8 e3       	ldi	r26, 0x38	; 56
  7c:	b0 e0       	ldi	r27, 0x00	; 0
  7e:	e8 e3       	ldi	r30, 0x38	; 56
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	80 81       	ld	r24, Z
  84:	80 95       	com	r24
  86:	8c 93       	st	X, r24
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	a8 ec       	ldi	r26, 0xC8	; 200
  8e:	b2 e4       	ldi	r27, 0x42	; 66
  90:	8b 87       	std	Y+11, r24	; 0x0b
  92:	9c 87       	std	Y+12, r25	; 0x0c
  94:	ad 87       	std	Y+13, r26	; 0x0d
  96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  98:	20 e0       	ldi	r18, 0x00	; 0
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	4a e7       	ldi	r20, 0x7A	; 122
  9e:	53 e4       	ldi	r21, 0x43	; 67
  a0:	6b 85       	ldd	r22, Y+11	; 0x0b
  a2:	7c 85       	ldd	r23, Y+12	; 0x0c
  a4:	8d 85       	ldd	r24, Y+13	; 0x0d
  a6:	9e 85       	ldd	r25, Y+14	; 0x0e
  a8:	db d1       	rcall	.+950    	; 0x460 <__mulsf3>
  aa:	dc 01       	movw	r26, r24
  ac:	cb 01       	movw	r24, r22
  ae:	8f 83       	std	Y+7, r24	; 0x07
  b0:	98 87       	std	Y+8, r25	; 0x08
  b2:	a9 87       	std	Y+9, r26	; 0x09
  b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
  b6:	20 e0       	ldi	r18, 0x00	; 0
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	40 e8       	ldi	r20, 0x80	; 128
  bc:	5f e3       	ldi	r21, 0x3F	; 63
  be:	6f 81       	ldd	r22, Y+7	; 0x07
  c0:	78 85       	ldd	r23, Y+8	; 0x08
  c2:	89 85       	ldd	r24, Y+9	; 0x09
  c4:	9a 85       	ldd	r25, Y+10	; 0x0a
  c6:	4b d1       	rcall	.+662    	; 0x35e <__cmpsf2>
  c8:	88 23       	and	r24, r24
  ca:	2c f4       	brge	.+10     	; 0xd6 <boot_program+0x78>
		__ticks = 1;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	9e 83       	std	Y+6, r25	; 0x06
  d2:	8d 83       	std	Y+5, r24	; 0x05
  d4:	3b c0       	rjmp	.+118    	; 0x14c <boot_program+0xee>
	else if (__tmp > 65535)
  d6:	20 e0       	ldi	r18, 0x00	; 0
  d8:	3f ef       	ldi	r19, 0xFF	; 255
  da:	4f e7       	ldi	r20, 0x7F	; 127
  dc:	57 e4       	ldi	r21, 0x47	; 71
  de:	6f 81       	ldd	r22, Y+7	; 0x07
  e0:	78 85       	ldd	r23, Y+8	; 0x08
  e2:	89 85       	ldd	r24, Y+9	; 0x09
  e4:	9a 85       	ldd	r25, Y+10	; 0x0a
  e6:	b8 d1       	rcall	.+880    	; 0x458 <__gesf2>
  e8:	18 16       	cp	r1, r24
  ea:	3c f5       	brge	.+78     	; 0x13a <boot_program+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	40 e2       	ldi	r20, 0x20	; 32
  f2:	51 e4       	ldi	r21, 0x41	; 65
  f4:	6b 85       	ldd	r22, Y+11	; 0x0b
  f6:	7c 85       	ldd	r23, Y+12	; 0x0c
  f8:	8d 85       	ldd	r24, Y+13	; 0x0d
  fa:	9e 85       	ldd	r25, Y+14	; 0x0e
  fc:	b1 d1       	rcall	.+866    	; 0x460 <__mulsf3>
  fe:	dc 01       	movw	r26, r24
 100:	cb 01       	movw	r24, r22
 102:	bc 01       	movw	r22, r24
 104:	cd 01       	movw	r24, r26
 106:	2f d1       	rcall	.+606    	; 0x366 <__fixunssfsi>
 108:	dc 01       	movw	r26, r24
 10a:	cb 01       	movw	r24, r22
 10c:	9e 83       	std	Y+6, r25	; 0x06
 10e:	8d 83       	std	Y+5, r24	; 0x05
 110:	0f c0       	rjmp	.+30     	; 0x130 <boot_program+0xd2>
 112:	89 e1       	ldi	r24, 0x19	; 25
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	9c 83       	std	Y+4, r25	; 0x04
 118:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 11a:	8b 81       	ldd	r24, Y+3	; 0x03
 11c:	9c 81       	ldd	r25, Y+4	; 0x04
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <boot_program+0xc0>
 122:	9c 83       	std	Y+4, r25	; 0x04
 124:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 126:	8d 81       	ldd	r24, Y+5	; 0x05
 128:	9e 81       	ldd	r25, Y+6	; 0x06
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	9e 83       	std	Y+6, r25	; 0x06
 12e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 130:	8d 81       	ldd	r24, Y+5	; 0x05
 132:	9e 81       	ldd	r25, Y+6	; 0x06
 134:	00 97       	sbiw	r24, 0x00	; 0
 136:	69 f7       	brne	.-38     	; 0x112 <boot_program+0xb4>
 138:	13 c0       	rjmp	.+38     	; 0x160 <boot_program+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 13a:	6f 81       	ldd	r22, Y+7	; 0x07
 13c:	78 85       	ldd	r23, Y+8	; 0x08
 13e:	89 85       	ldd	r24, Y+9	; 0x09
 140:	9a 85       	ldd	r25, Y+10	; 0x0a
 142:	11 d1       	rcall	.+546    	; 0x366 <__fixunssfsi>
 144:	dc 01       	movw	r26, r24
 146:	cb 01       	movw	r24, r22
 148:	9e 83       	std	Y+6, r25	; 0x06
 14a:	8d 83       	std	Y+5, r24	; 0x05
 14c:	8d 81       	ldd	r24, Y+5	; 0x05
 14e:	9e 81       	ldd	r25, Y+6	; 0x06
 150:	9a 83       	std	Y+2, r25	; 0x02
 152:	89 83       	std	Y+1, r24	; 0x01
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	9a 81       	ldd	r25, Y+2	; 0x02
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <boot_program+0xfa>
 15c:	9a 83       	std	Y+2, r25	; 0x02
 15e:	89 83       	std	Y+1, r24	; 0x01
	  _delay_ms(100);
	  // PORTB = 0x00;
	  // _delay_ms(100);
}
 160:	2e 96       	adiw	r28, 0x0e	; 14
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	f8 94       	cli
 166:	de bf       	out	0x3e, r29	; 62
 168:	0f be       	out	0x3f, r0	; 63
 16a:	cd bf       	out	0x3d, r28	; 61
 16c:	cf 91       	pop	r28
 16e:	df 91       	pop	r29
 170:	08 95       	ret

00000172 <main>:
	

// *********************************************************// Main program

int main(void)
{
 172:	df 93       	push	r29
 174:	cf 93       	push	r28
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	6c 97       	sbiw	r28, 0x1c	; 28
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	f8 94       	cli
 180:	de bf       	out	0x3e, r29	; 62
 182:	0f be       	out	0x3f, r0	; 63
 184:	cd bf       	out	0x3d, r28	; 61
		boot_program();
 186:	6b df       	rcall	.-298    	; 0x5e <boot_program>
  	asm("rjmp 0x0000");
 188:	6a cf       	rjmp	.-300    	; 0x5e <boot_program>
	
		PORTB = 0xFF;
 18a:	e8 e3       	ldi	r30, 0x38	; 56
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	80 83       	st	Z, r24
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	a8 ec       	ldi	r26, 0xC8	; 200
 198:	b2 e4       	ldi	r27, 0x42	; 66
 19a:	89 8f       	std	Y+25, r24	; 0x19
 19c:	9a 8f       	std	Y+26, r25	; 0x1a
 19e:	ab 8f       	std	Y+27, r26	; 0x1b
 1a0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 1a2:	20 e0       	ldi	r18, 0x00	; 0
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	4a e7       	ldi	r20, 0x7A	; 122
 1a8:	53 e4       	ldi	r21, 0x43	; 67
 1aa:	69 8d       	ldd	r22, Y+25	; 0x19
 1ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
 1ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
 1b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
 1b2:	56 d1       	rcall	.+684    	; 0x460 <__mulsf3>
 1b4:	dc 01       	movw	r26, r24
 1b6:	cb 01       	movw	r24, r22
 1b8:	8d 8b       	std	Y+21, r24	; 0x15
 1ba:	9e 8b       	std	Y+22, r25	; 0x16
 1bc:	af 8b       	std	Y+23, r26	; 0x17
 1be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	40 e8       	ldi	r20, 0x80	; 128
 1c6:	5f e3       	ldi	r21, 0x3F	; 63
 1c8:	6d 89       	ldd	r22, Y+21	; 0x15
 1ca:	7e 89       	ldd	r23, Y+22	; 0x16
 1cc:	8f 89       	ldd	r24, Y+23	; 0x17
 1ce:	98 8d       	ldd	r25, Y+24	; 0x18
 1d0:	c6 d0       	rcall	.+396    	; 0x35e <__cmpsf2>
 1d2:	88 23       	and	r24, r24
 1d4:	2c f4       	brge	.+10     	; 0x1e0 <main+0x6e>
		__ticks = 1;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	9c 8b       	std	Y+20, r25	; 0x14
 1dc:	8b 8b       	std	Y+19, r24	; 0x13
 1de:	3b c0       	rjmp	.+118    	; 0x256 <main+0xe4>
	else if (__tmp > 65535)
 1e0:	20 e0       	ldi	r18, 0x00	; 0
 1e2:	3f ef       	ldi	r19, 0xFF	; 255
 1e4:	4f e7       	ldi	r20, 0x7F	; 127
 1e6:	57 e4       	ldi	r21, 0x47	; 71
 1e8:	6d 89       	ldd	r22, Y+21	; 0x15
 1ea:	7e 89       	ldd	r23, Y+22	; 0x16
 1ec:	8f 89       	ldd	r24, Y+23	; 0x17
 1ee:	98 8d       	ldd	r25, Y+24	; 0x18
 1f0:	33 d1       	rcall	.+614    	; 0x458 <__gesf2>
 1f2:	18 16       	cp	r1, r24
 1f4:	3c f5       	brge	.+78     	; 0x244 <main+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1f6:	20 e0       	ldi	r18, 0x00	; 0
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	40 e2       	ldi	r20, 0x20	; 32
 1fc:	51 e4       	ldi	r21, 0x41	; 65
 1fe:	69 8d       	ldd	r22, Y+25	; 0x19
 200:	7a 8d       	ldd	r23, Y+26	; 0x1a
 202:	8b 8d       	ldd	r24, Y+27	; 0x1b
 204:	9c 8d       	ldd	r25, Y+28	; 0x1c
 206:	2c d1       	rcall	.+600    	; 0x460 <__mulsf3>
 208:	dc 01       	movw	r26, r24
 20a:	cb 01       	movw	r24, r22
 20c:	bc 01       	movw	r22, r24
 20e:	cd 01       	movw	r24, r26
 210:	aa d0       	rcall	.+340    	; 0x366 <__fixunssfsi>
 212:	dc 01       	movw	r26, r24
 214:	cb 01       	movw	r24, r22
 216:	9c 8b       	std	Y+20, r25	; 0x14
 218:	8b 8b       	std	Y+19, r24	; 0x13
 21a:	0f c0       	rjmp	.+30     	; 0x23a <main+0xc8>
 21c:	89 e1       	ldi	r24, 0x19	; 25
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	9a 8b       	std	Y+18, r25	; 0x12
 222:	89 8b       	std	Y+17, r24	; 0x11
 224:	89 89       	ldd	r24, Y+17	; 0x11
 226:	9a 89       	ldd	r25, Y+18	; 0x12
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <main+0xb6>
 22c:	9a 8b       	std	Y+18, r25	; 0x12
 22e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 230:	8b 89       	ldd	r24, Y+19	; 0x13
 232:	9c 89       	ldd	r25, Y+20	; 0x14
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	9c 8b       	std	Y+20, r25	; 0x14
 238:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 23a:	8b 89       	ldd	r24, Y+19	; 0x13
 23c:	9c 89       	ldd	r25, Y+20	; 0x14
 23e:	00 97       	sbiw	r24, 0x00	; 0
 240:	69 f7       	brne	.-38     	; 0x21c <main+0xaa>
 242:	13 c0       	rjmp	.+38     	; 0x26a <main+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 244:	6d 89       	ldd	r22, Y+21	; 0x15
 246:	7e 89       	ldd	r23, Y+22	; 0x16
 248:	8f 89       	ldd	r24, Y+23	; 0x17
 24a:	98 8d       	ldd	r25, Y+24	; 0x18
 24c:	8c d0       	rcall	.+280    	; 0x366 <__fixunssfsi>
 24e:	dc 01       	movw	r26, r24
 250:	cb 01       	movw	r24, r22
 252:	9c 8b       	std	Y+20, r25	; 0x14
 254:	8b 8b       	std	Y+19, r24	; 0x13
 256:	8b 89       	ldd	r24, Y+19	; 0x13
 258:	9c 89       	ldd	r25, Y+20	; 0x14
 25a:	98 8b       	std	Y+16, r25	; 0x10
 25c:	8f 87       	std	Y+15, r24	; 0x0f
 25e:	8f 85       	ldd	r24, Y+15	; 0x0f
 260:	98 89       	ldd	r25, Y+16	; 0x10
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <main+0xf0>
 266:	98 8b       	std	Y+16, r25	; 0x10
 268:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
	   PORTB = 0x00;
 26a:	e8 e3       	ldi	r30, 0x38	; 56
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	10 82       	st	Z, r1
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	a8 ec       	ldi	r26, 0xC8	; 200
 276:	b2 e4       	ldi	r27, 0x42	; 66
 278:	8b 87       	std	Y+11, r24	; 0x0b
 27a:	9c 87       	std	Y+12, r25	; 0x0c
 27c:	ad 87       	std	Y+13, r26	; 0x0d
 27e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 280:	20 e0       	ldi	r18, 0x00	; 0
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	4a e7       	ldi	r20, 0x7A	; 122
 286:	53 e4       	ldi	r21, 0x43	; 67
 288:	6b 85       	ldd	r22, Y+11	; 0x0b
 28a:	7c 85       	ldd	r23, Y+12	; 0x0c
 28c:	8d 85       	ldd	r24, Y+13	; 0x0d
 28e:	9e 85       	ldd	r25, Y+14	; 0x0e
 290:	e7 d0       	rcall	.+462    	; 0x460 <__mulsf3>
 292:	dc 01       	movw	r26, r24
 294:	cb 01       	movw	r24, r22
 296:	8f 83       	std	Y+7, r24	; 0x07
 298:	98 87       	std	Y+8, r25	; 0x08
 29a:	a9 87       	std	Y+9, r26	; 0x09
 29c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 29e:	20 e0       	ldi	r18, 0x00	; 0
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	40 e8       	ldi	r20, 0x80	; 128
 2a4:	5f e3       	ldi	r21, 0x3F	; 63
 2a6:	6f 81       	ldd	r22, Y+7	; 0x07
 2a8:	78 85       	ldd	r23, Y+8	; 0x08
 2aa:	89 85       	ldd	r24, Y+9	; 0x09
 2ac:	9a 85       	ldd	r25, Y+10	; 0x0a
 2ae:	57 d0       	rcall	.+174    	; 0x35e <__cmpsf2>
 2b0:	88 23       	and	r24, r24
 2b2:	2c f4       	brge	.+10     	; 0x2be <main+0x14c>
		__ticks = 1;
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	9e 83       	std	Y+6, r25	; 0x06
 2ba:	8d 83       	std	Y+5, r24	; 0x05
 2bc:	3b c0       	rjmp	.+118    	; 0x334 <main+0x1c2>
	else if (__tmp > 65535)
 2be:	20 e0       	ldi	r18, 0x00	; 0
 2c0:	3f ef       	ldi	r19, 0xFF	; 255
 2c2:	4f e7       	ldi	r20, 0x7F	; 127
 2c4:	57 e4       	ldi	r21, 0x47	; 71
 2c6:	6f 81       	ldd	r22, Y+7	; 0x07
 2c8:	78 85       	ldd	r23, Y+8	; 0x08
 2ca:	89 85       	ldd	r24, Y+9	; 0x09
 2cc:	9a 85       	ldd	r25, Y+10	; 0x0a
 2ce:	c4 d0       	rcall	.+392    	; 0x458 <__gesf2>
 2d0:	18 16       	cp	r1, r24
 2d2:	3c f5       	brge	.+78     	; 0x322 <main+0x1b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2d4:	20 e0       	ldi	r18, 0x00	; 0
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	40 e2       	ldi	r20, 0x20	; 32
 2da:	51 e4       	ldi	r21, 0x41	; 65
 2dc:	6b 85       	ldd	r22, Y+11	; 0x0b
 2de:	7c 85       	ldd	r23, Y+12	; 0x0c
 2e0:	8d 85       	ldd	r24, Y+13	; 0x0d
 2e2:	9e 85       	ldd	r25, Y+14	; 0x0e
 2e4:	bd d0       	rcall	.+378    	; 0x460 <__mulsf3>
 2e6:	dc 01       	movw	r26, r24
 2e8:	cb 01       	movw	r24, r22
 2ea:	bc 01       	movw	r22, r24
 2ec:	cd 01       	movw	r24, r26
 2ee:	3b d0       	rcall	.+118    	; 0x366 <__fixunssfsi>
 2f0:	dc 01       	movw	r26, r24
 2f2:	cb 01       	movw	r24, r22
 2f4:	9e 83       	std	Y+6, r25	; 0x06
 2f6:	8d 83       	std	Y+5, r24	; 0x05
 2f8:	0f c0       	rjmp	.+30     	; 0x318 <main+0x1a6>
 2fa:	89 e1       	ldi	r24, 0x19	; 25
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	9c 83       	std	Y+4, r25	; 0x04
 300:	8b 83       	std	Y+3, r24	; 0x03
 302:	8b 81       	ldd	r24, Y+3	; 0x03
 304:	9c 81       	ldd	r25, Y+4	; 0x04
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f1 f7       	brne	.-4      	; 0x306 <main+0x194>
 30a:	9c 83       	std	Y+4, r25	; 0x04
 30c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 30e:	8d 81       	ldd	r24, Y+5	; 0x05
 310:	9e 81       	ldd	r25, Y+6	; 0x06
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	9e 83       	std	Y+6, r25	; 0x06
 316:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 318:	8d 81       	ldd	r24, Y+5	; 0x05
 31a:	9e 81       	ldd	r25, Y+6	; 0x06
 31c:	00 97       	sbiw	r24, 0x00	; 0
 31e:	69 f7       	brne	.-38     	; 0x2fa <main+0x188>
 320:	13 c0       	rjmp	.+38     	; 0x348 <main+0x1d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 322:	6f 81       	ldd	r22, Y+7	; 0x07
 324:	78 85       	ldd	r23, Y+8	; 0x08
 326:	89 85       	ldd	r24, Y+9	; 0x09
 328:	9a 85       	ldd	r25, Y+10	; 0x0a
 32a:	1d d0       	rcall	.+58     	; 0x366 <__fixunssfsi>
 32c:	dc 01       	movw	r26, r24
 32e:	cb 01       	movw	r24, r22
 330:	9e 83       	std	Y+6, r25	; 0x06
 332:	8d 83       	std	Y+5, r24	; 0x05
 334:	8d 81       	ldd	r24, Y+5	; 0x05
 336:	9e 81       	ldd	r25, Y+6	; 0x06
 338:	9a 83       	std	Y+2, r25	; 0x02
 33a:	89 83       	std	Y+1, r24	; 0x01
 33c:	89 81       	ldd	r24, Y+1	; 0x01
 33e:	9a 81       	ldd	r25, Y+2	; 0x02
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <main+0x1ce>
 344:	9a 83       	std	Y+2, r25	; 0x02
 346:	89 83       	std	Y+1, r24	; 0x01
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	90 e0       	ldi	r25, 0x00	; 0
	   _delay_ms(100); 	

}
 34c:	6c 96       	adiw	r28, 0x1c	; 28
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	f8 94       	cli
 352:	de bf       	out	0x3e, r29	; 62
 354:	0f be       	out	0x3f, r0	; 63
 356:	cd bf       	out	0x3d, r28	; 61
 358:	cf 91       	pop	r28
 35a:	df 91       	pop	r29
 35c:	08 95       	ret

0000035e <__cmpsf2>:
 35e:	2f d0       	rcall	.+94     	; 0x3be <__fp_cmp>
 360:	08 f4       	brcc	.+2      	; 0x364 <__cmpsf2+0x6>
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	08 95       	ret

00000366 <__fixunssfsi>:
 366:	57 d0       	rcall	.+174    	; 0x416 <__fp_splitA>
 368:	88 f0       	brcs	.+34     	; 0x38c <__fixunssfsi+0x26>
 36a:	9f 57       	subi	r25, 0x7F	; 127
 36c:	90 f0       	brcs	.+36     	; 0x392 <__fixunssfsi+0x2c>
 36e:	b9 2f       	mov	r27, r25
 370:	99 27       	eor	r25, r25
 372:	b7 51       	subi	r27, 0x17	; 23
 374:	a0 f0       	brcs	.+40     	; 0x39e <__fixunssfsi+0x38>
 376:	d1 f0       	breq	.+52     	; 0x3ac <__fixunssfsi+0x46>
 378:	66 0f       	add	r22, r22
 37a:	77 1f       	adc	r23, r23
 37c:	88 1f       	adc	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	1a f0       	brmi	.+6      	; 0x388 <__fixunssfsi+0x22>
 382:	ba 95       	dec	r27
 384:	c9 f7       	brne	.-14     	; 0x378 <__fixunssfsi+0x12>
 386:	12 c0       	rjmp	.+36     	; 0x3ac <__fixunssfsi+0x46>
 388:	b1 30       	cpi	r27, 0x01	; 1
 38a:	81 f0       	breq	.+32     	; 0x3ac <__fixunssfsi+0x46>
 38c:	5e d0       	rcall	.+188    	; 0x44a <__fp_zero>
 38e:	b1 e0       	ldi	r27, 0x01	; 1
 390:	08 95       	ret
 392:	5b c0       	rjmp	.+182    	; 0x44a <__fp_zero>
 394:	67 2f       	mov	r22, r23
 396:	78 2f       	mov	r23, r24
 398:	88 27       	eor	r24, r24
 39a:	b8 5f       	subi	r27, 0xF8	; 248
 39c:	39 f0       	breq	.+14     	; 0x3ac <__fixunssfsi+0x46>
 39e:	b9 3f       	cpi	r27, 0xF9	; 249
 3a0:	cc f3       	brlt	.-14     	; 0x394 <__fixunssfsi+0x2e>
 3a2:	86 95       	lsr	r24
 3a4:	77 95       	ror	r23
 3a6:	67 95       	ror	r22
 3a8:	b3 95       	inc	r27
 3aa:	d9 f7       	brne	.-10     	; 0x3a2 <__fixunssfsi+0x3c>
 3ac:	3e f4       	brtc	.+14     	; 0x3bc <__fixunssfsi+0x56>
 3ae:	90 95       	com	r25
 3b0:	80 95       	com	r24
 3b2:	70 95       	com	r23
 3b4:	61 95       	neg	r22
 3b6:	7f 4f       	sbci	r23, 0xFF	; 255
 3b8:	8f 4f       	sbci	r24, 0xFF	; 255
 3ba:	9f 4f       	sbci	r25, 0xFF	; 255
 3bc:	08 95       	ret

000003be <__fp_cmp>:
 3be:	99 0f       	add	r25, r25
 3c0:	00 08       	sbc	r0, r0
 3c2:	55 0f       	add	r21, r21
 3c4:	aa 0b       	sbc	r26, r26
 3c6:	e0 e8       	ldi	r30, 0x80	; 128
 3c8:	fe ef       	ldi	r31, 0xFE	; 254
 3ca:	16 16       	cp	r1, r22
 3cc:	17 06       	cpc	r1, r23
 3ce:	e8 07       	cpc	r30, r24
 3d0:	f9 07       	cpc	r31, r25
 3d2:	c0 f0       	brcs	.+48     	; 0x404 <__fp_cmp+0x46>
 3d4:	12 16       	cp	r1, r18
 3d6:	13 06       	cpc	r1, r19
 3d8:	e4 07       	cpc	r30, r20
 3da:	f5 07       	cpc	r31, r21
 3dc:	98 f0       	brcs	.+38     	; 0x404 <__fp_cmp+0x46>
 3de:	62 1b       	sub	r22, r18
 3e0:	73 0b       	sbc	r23, r19
 3e2:	84 0b       	sbc	r24, r20
 3e4:	95 0b       	sbc	r25, r21
 3e6:	39 f4       	brne	.+14     	; 0x3f6 <__fp_cmp+0x38>
 3e8:	0a 26       	eor	r0, r26
 3ea:	61 f0       	breq	.+24     	; 0x404 <__fp_cmp+0x46>
 3ec:	23 2b       	or	r18, r19
 3ee:	24 2b       	or	r18, r20
 3f0:	25 2b       	or	r18, r21
 3f2:	21 f4       	brne	.+8      	; 0x3fc <__fp_cmp+0x3e>
 3f4:	08 95       	ret
 3f6:	0a 26       	eor	r0, r26
 3f8:	09 f4       	brne	.+2      	; 0x3fc <__fp_cmp+0x3e>
 3fa:	a1 40       	sbci	r26, 0x01	; 1
 3fc:	a6 95       	lsr	r26
 3fe:	8f ef       	ldi	r24, 0xFF	; 255
 400:	81 1d       	adc	r24, r1
 402:	81 1d       	adc	r24, r1
 404:	08 95       	ret

00000406 <__fp_split3>:
 406:	57 fd       	sbrc	r21, 7
 408:	90 58       	subi	r25, 0x80	; 128
 40a:	44 0f       	add	r20, r20
 40c:	55 1f       	adc	r21, r21
 40e:	59 f0       	breq	.+22     	; 0x426 <__fp_splitA+0x10>
 410:	5f 3f       	cpi	r21, 0xFF	; 255
 412:	71 f0       	breq	.+28     	; 0x430 <__fp_splitA+0x1a>
 414:	47 95       	ror	r20

00000416 <__fp_splitA>:
 416:	88 0f       	add	r24, r24
 418:	97 fb       	bst	r25, 7
 41a:	99 1f       	adc	r25, r25
 41c:	61 f0       	breq	.+24     	; 0x436 <__fp_splitA+0x20>
 41e:	9f 3f       	cpi	r25, 0xFF	; 255
 420:	79 f0       	breq	.+30     	; 0x440 <__fp_splitA+0x2a>
 422:	87 95       	ror	r24
 424:	08 95       	ret
 426:	12 16       	cp	r1, r18
 428:	13 06       	cpc	r1, r19
 42a:	14 06       	cpc	r1, r20
 42c:	55 1f       	adc	r21, r21
 42e:	f2 cf       	rjmp	.-28     	; 0x414 <__fp_split3+0xe>
 430:	46 95       	lsr	r20
 432:	f1 df       	rcall	.-30     	; 0x416 <__fp_splitA>
 434:	08 c0       	rjmp	.+16     	; 0x446 <__fp_splitA+0x30>
 436:	16 16       	cp	r1, r22
 438:	17 06       	cpc	r1, r23
 43a:	18 06       	cpc	r1, r24
 43c:	99 1f       	adc	r25, r25
 43e:	f1 cf       	rjmp	.-30     	; 0x422 <__fp_splitA+0xc>
 440:	86 95       	lsr	r24
 442:	71 05       	cpc	r23, r1
 444:	61 05       	cpc	r22, r1
 446:	08 94       	sec
 448:	08 95       	ret

0000044a <__fp_zero>:
 44a:	e8 94       	clt

0000044c <__fp_szero>:
 44c:	bb 27       	eor	r27, r27
 44e:	66 27       	eor	r22, r22
 450:	77 27       	eor	r23, r23
 452:	cb 01       	movw	r24, r22
 454:	97 f9       	bld	r25, 7
 456:	08 95       	ret

00000458 <__gesf2>:
 458:	b2 df       	rcall	.-156    	; 0x3be <__fp_cmp>
 45a:	08 f4       	brcc	.+2      	; 0x45e <__gesf2+0x6>
 45c:	8f ef       	ldi	r24, 0xFF	; 255
 45e:	08 95       	ret

00000460 <__mulsf3>:
 460:	0b d0       	rcall	.+22     	; 0x478 <__mulsf3x>
 462:	78 c0       	rjmp	.+240    	; 0x554 <__fp_round>
 464:	69 d0       	rcall	.+210    	; 0x538 <__fp_pscA>
 466:	28 f0       	brcs	.+10     	; 0x472 <__mulsf3+0x12>
 468:	6e d0       	rcall	.+220    	; 0x546 <__fp_pscB>
 46a:	18 f0       	brcs	.+6      	; 0x472 <__mulsf3+0x12>
 46c:	95 23       	and	r25, r21
 46e:	09 f0       	breq	.+2      	; 0x472 <__mulsf3+0x12>
 470:	5a c0       	rjmp	.+180    	; 0x526 <__fp_inf>
 472:	5f c0       	rjmp	.+190    	; 0x532 <__fp_nan>
 474:	11 24       	eor	r1, r1
 476:	ea cf       	rjmp	.-44     	; 0x44c <__fp_szero>

00000478 <__mulsf3x>:
 478:	c6 df       	rcall	.-116    	; 0x406 <__fp_split3>
 47a:	a0 f3       	brcs	.-24     	; 0x464 <__mulsf3+0x4>

0000047c <__mulsf3_pse>:
 47c:	95 9f       	mul	r25, r21
 47e:	d1 f3       	breq	.-12     	; 0x474 <__mulsf3+0x14>
 480:	95 0f       	add	r25, r21
 482:	50 e0       	ldi	r21, 0x00	; 0
 484:	55 1f       	adc	r21, r21
 486:	62 9f       	mul	r22, r18
 488:	f0 01       	movw	r30, r0
 48a:	72 9f       	mul	r23, r18
 48c:	bb 27       	eor	r27, r27
 48e:	f0 0d       	add	r31, r0
 490:	b1 1d       	adc	r27, r1
 492:	63 9f       	mul	r22, r19
 494:	aa 27       	eor	r26, r26
 496:	f0 0d       	add	r31, r0
 498:	b1 1d       	adc	r27, r1
 49a:	aa 1f       	adc	r26, r26
 49c:	64 9f       	mul	r22, r20
 49e:	66 27       	eor	r22, r22
 4a0:	b0 0d       	add	r27, r0
 4a2:	a1 1d       	adc	r26, r1
 4a4:	66 1f       	adc	r22, r22
 4a6:	82 9f       	mul	r24, r18
 4a8:	22 27       	eor	r18, r18
 4aa:	b0 0d       	add	r27, r0
 4ac:	a1 1d       	adc	r26, r1
 4ae:	62 1f       	adc	r22, r18
 4b0:	73 9f       	mul	r23, r19
 4b2:	b0 0d       	add	r27, r0
 4b4:	a1 1d       	adc	r26, r1
 4b6:	62 1f       	adc	r22, r18
 4b8:	83 9f       	mul	r24, r19
 4ba:	a0 0d       	add	r26, r0
 4bc:	61 1d       	adc	r22, r1
 4be:	22 1f       	adc	r18, r18
 4c0:	74 9f       	mul	r23, r20
 4c2:	33 27       	eor	r19, r19
 4c4:	a0 0d       	add	r26, r0
 4c6:	61 1d       	adc	r22, r1
 4c8:	23 1f       	adc	r18, r19
 4ca:	84 9f       	mul	r24, r20
 4cc:	60 0d       	add	r22, r0
 4ce:	21 1d       	adc	r18, r1
 4d0:	82 2f       	mov	r24, r18
 4d2:	76 2f       	mov	r23, r22
 4d4:	6a 2f       	mov	r22, r26
 4d6:	11 24       	eor	r1, r1
 4d8:	9f 57       	subi	r25, 0x7F	; 127
 4da:	50 40       	sbci	r21, 0x00	; 0
 4dc:	8a f0       	brmi	.+34     	; 0x500 <__mulsf3_pse+0x84>
 4de:	e1 f0       	breq	.+56     	; 0x518 <__mulsf3_pse+0x9c>
 4e0:	88 23       	and	r24, r24
 4e2:	4a f0       	brmi	.+18     	; 0x4f6 <__mulsf3_pse+0x7a>
 4e4:	ee 0f       	add	r30, r30
 4e6:	ff 1f       	adc	r31, r31
 4e8:	bb 1f       	adc	r27, r27
 4ea:	66 1f       	adc	r22, r22
 4ec:	77 1f       	adc	r23, r23
 4ee:	88 1f       	adc	r24, r24
 4f0:	91 50       	subi	r25, 0x01	; 1
 4f2:	50 40       	sbci	r21, 0x00	; 0
 4f4:	a9 f7       	brne	.-22     	; 0x4e0 <__mulsf3_pse+0x64>
 4f6:	9e 3f       	cpi	r25, 0xFE	; 254
 4f8:	51 05       	cpc	r21, r1
 4fa:	70 f0       	brcs	.+28     	; 0x518 <__mulsf3_pse+0x9c>
 4fc:	14 c0       	rjmp	.+40     	; 0x526 <__fp_inf>
 4fe:	a6 cf       	rjmp	.-180    	; 0x44c <__fp_szero>
 500:	5f 3f       	cpi	r21, 0xFF	; 255
 502:	ec f3       	brlt	.-6      	; 0x4fe <__mulsf3_pse+0x82>
 504:	98 3e       	cpi	r25, 0xE8	; 232
 506:	dc f3       	brlt	.-10     	; 0x4fe <__mulsf3_pse+0x82>
 508:	86 95       	lsr	r24
 50a:	77 95       	ror	r23
 50c:	67 95       	ror	r22
 50e:	b7 95       	ror	r27
 510:	f7 95       	ror	r31
 512:	e7 95       	ror	r30
 514:	9f 5f       	subi	r25, 0xFF	; 255
 516:	c1 f7       	brne	.-16     	; 0x508 <__mulsf3_pse+0x8c>
 518:	fe 2b       	or	r31, r30
 51a:	88 0f       	add	r24, r24
 51c:	91 1d       	adc	r25, r1
 51e:	96 95       	lsr	r25
 520:	87 95       	ror	r24
 522:	97 f9       	bld	r25, 7
 524:	08 95       	ret

00000526 <__fp_inf>:
 526:	97 f9       	bld	r25, 7
 528:	9f 67       	ori	r25, 0x7F	; 127
 52a:	80 e8       	ldi	r24, 0x80	; 128
 52c:	70 e0       	ldi	r23, 0x00	; 0
 52e:	60 e0       	ldi	r22, 0x00	; 0
 530:	08 95       	ret

00000532 <__fp_nan>:
 532:	9f ef       	ldi	r25, 0xFF	; 255
 534:	80 ec       	ldi	r24, 0xC0	; 192
 536:	08 95       	ret

00000538 <__fp_pscA>:
 538:	00 24       	eor	r0, r0
 53a:	0a 94       	dec	r0
 53c:	16 16       	cp	r1, r22
 53e:	17 06       	cpc	r1, r23
 540:	18 06       	cpc	r1, r24
 542:	09 06       	cpc	r0, r25
 544:	08 95       	ret

00000546 <__fp_pscB>:
 546:	00 24       	eor	r0, r0
 548:	0a 94       	dec	r0
 54a:	12 16       	cp	r1, r18
 54c:	13 06       	cpc	r1, r19
 54e:	14 06       	cpc	r1, r20
 550:	05 06       	cpc	r0, r21
 552:	08 95       	ret

00000554 <__fp_round>:
 554:	09 2e       	mov	r0, r25
 556:	03 94       	inc	r0
 558:	00 0c       	add	r0, r0
 55a:	11 f4       	brne	.+4      	; 0x560 <__fp_round+0xc>
 55c:	88 23       	and	r24, r24
 55e:	52 f0       	brmi	.+20     	; 0x574 <__fp_round+0x20>
 560:	bb 0f       	add	r27, r27
 562:	40 f4       	brcc	.+16     	; 0x574 <__fp_round+0x20>
 564:	bf 2b       	or	r27, r31
 566:	11 f4       	brne	.+4      	; 0x56c <__fp_round+0x18>
 568:	60 ff       	sbrs	r22, 0
 56a:	04 c0       	rjmp	.+8      	; 0x574 <__fp_round+0x20>
 56c:	6f 5f       	subi	r22, 0xFF	; 255
 56e:	7f 4f       	sbci	r23, 0xFF	; 255
 570:	8f 4f       	sbci	r24, 0xFF	; 255
 572:	9f 4f       	sbci	r25, 0xFF	; 255
 574:	08 95       	ret

00000576 <_exit>:
 576:	f8 94       	cli

00000578 <__stop_program>:
 578:	ff cf       	rjmp	.-2      	; 0x578 <__stop_program>
